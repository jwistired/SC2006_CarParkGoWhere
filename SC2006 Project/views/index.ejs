<html>
<head>
    <title>User Map View</title>
    <link rel="stylesheet" href="https://www.onemap.gov.sg/web-assets/libs/leaflet/leaflet.css" />
    <script src="https://www.onemap.gov.sg/web-assets/libs/leaflet/onemap-leaflet.js"></script>
    <script src="https://www.onemap.gov.sg/web-assets/libs/leaflet/leaflet-tilejson.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=search" />
    <link rel="stylesheet" href="\css\styles_user.css">
</head>

<body onload="changeLanguage()">
    <!-- Header with logo, search bar, filter, and login/register -->
    <div class="header">
        <!-- Logo -->
        <img src="\css\images\logo.jpg" alt="Logo" class="logo">

        <!-- Search bar with search icon -->
        <div class="search-bar">
            <form autocomplete="off" onsubmit="event.preventDefault(); searchLocation();">
                <input class="search-input" type="search" id="search" placeholder="Search for parking lots" oninput="showSuggestions()" autocomplete="off">
                <div id="autocomplete-list" class="autocomplete-items"></div> <!-- Autocomplete suggestion list -->
                <button type="submit" class="search-icon-btn">
                    <img src="\css\images\icons\search.png" alt="Search">
                </button>
            </form>
        </div>
        
        <!-- Filter dropdown -->
        <button class="filter-button" onclick="toggleFilterDropdown()">
            <img src="\css\images\icons\filter.png" class="filter-icon">
            <span class="filter-caption">Filter</span>
            <div class="filter-dropdown" id="filtersDropdown">
                <div class="filter-item">
                    <div class="filter-slider">
                        <label class="switch">
                            <input type="checkbox" id="filter-distance" value="true">
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="filter-text">
                        <span class="slider-text">Distance</span>
                    </div>
                </div>
                <div class="filter-item">
                    <div class="filter-slider">
                        <label class="switch">
                            <input type="checkbox" id="filter-price" value="true">
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="filter-text">
                        <span class="slider-text">Cheapest Carpark</span>
                    </div>
                </div>
                <div class="filter-item">
                    <div class="filter-slider">
                        <label class="switch">
                            <input type="checkbox" id="filter-lots" value="true">
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="filter-text">
                        <span class="slider-text">Parking Lots</span>
                    </div>
                </div>
            </div>
        </button>
        
        <!-- Profile and Language Setting -->
        <button class="profile-settings" onclick="openprofileBar()">
            <img src="\css\images\icons\settings.png" class="settings-icon">
            <span class="profile-caption">Settings</span>
        </button>
            
        <!-- Logout icon -->
        <button class="logout-btn w3-button" onclick="logout()">
            <img src="\css\images\icons\logout.png" class="login-icon">
            <span class="logout-caption">Logout</span>
        </button>
    </div>

    <div class="content">
        <!-- Sidebar for parking lots -->
        <div class ="sidebar sidebar-hidden" id="sidebar">
            <!-- <img src="\css\images\icons\close.png" class="close-icon" onclick="closesideBar()"> -->
            <h2 class="parkinglotsHeader">Parking Lots Found</h2>
            <div id="parking-lots">
                <!-- Parking lot info will be dynamically added here -->
            </div>
            <button class="exit-button" onclick="closesideBar()">Close</button>
        </div>

        <!-- settings sidebar -->
        <div class ="profile-sidebar" id="profile-bar">
            <img src="\css\images\icons\close.png" class="close-icon" onclick="closeprofileBar()">
            <h2 class="profile-header-text">User Profiles and Settings</h2>
            <img src="\css\images\icons\account_icon.png" class="user-profile-pic">
            <h1 class="profile-sider-username" id="welcomeText"></h1>
            <h1 class="profile-sider-username" id="name-display"><%= name %></h1>
            <h2 class="profile-sider-username" id="email-display">Placeholder Email</h2>

            <div class="language-selector">
                <label for="languageDropdown" class="selectLanguage">Select Language:</label>
                <select id="languageDropdown" onchange="changeLanguage()">
                    <option value="en" selected>English</option>
                    <option value="zh">中文 (Chinese)</option>
                    <option value="ms">Malay</option>
                    <option value="ta">தமிழ் (Tamil)</option>
                </select>
            </div>
            <div class="user-hist">
                <button class="user-history-btn" onclick="openhistBar()">View History</button>
            </div>
        </div>

        <!-- MAP -->
        <div id='mapdiv'></div>

        <!-- Right sidebar for parking history -->
        <div id="histbar" class="history-sidebar histbar-hidden">
            <img src="\css\images\icons\close.png" class="close-icon" onclick="closehistBar()">
            <h2>Parking History</h2>
            <div id="parking-history">
                <!-- Parking history info will be dynamically added here -->
            </div>
        </div>
    </div>

    <script>
        let sw = L.latLng(1.144, 103.535);
        let ne = L.latLng(1.494, 104.502);
        let bounds = L.latLngBounds(sw, ne);
        let map, userLatLng;

        // Fetch the token when the page loads
        let apiToken;

        async function fetchApiToken() {
        try {
            const response = await fetch('/api/token');
            if (!response.ok) {
                throw new Error('Failed to fetch token');
            }
            const data = await response.json();
            apiToken = data.token; // Store the token
        } catch (error) {
            console.error('Error fetching token:', error);
        }}

        // Access key for URA API
        const uraAccessKey = '18ee826a-2210-4a40-972e-3a1e3c317ba0';
        const token = 'd3@ebNc-V5628AaS2+7FkzD1x7ab002WFehG1Hfb52fXaYj4+6c3a2-EJB3ea723-4q231t+32a3c8C1GXxFa4up8aa-Wt3e7918';

        async function getAllCarparkCoor_HDB() {
            try {
                const response = await fetch('/api/carpark-coordinates');
                const data = await response.json(); // Get the coordinates data from the response
                console.log("HDB Carpark Coordinates:", data); // For debugging
                return data; // Return the data for further use
            } catch (error) {
                console.error('Error fetching carpark coordinates:', error);
                return [];
            }
        }

        async function findNearbyCarparks_HDB(lat, lon) {
            try {
                const response = await fetch(`/api/find-nearby-carparks?lat=${lat}&lon=${lon}`);
                const data = await response.json(); // Get the nearby carparks data from the response
                console.log("HDB Nearby Carparks:", data); // For debugging
                return data; // Return the data for further use
            } catch (error) {
                console.error('Error fetching nearby carparks:', error);
                return [];
            }
        }

        async function getCarparkLotsDetails_HDB(carparkNum,carparkName){
            try {
                const response = await fetch(`/api/carpark-lots-details/${carparkNum}?carparkName=${encodeURIComponent(carparkName)}`);
                const carParkDetails = await response.json();
                console.log('HDB Lots Detail of nearby carpark:', carParkDetails);
                return carParkDetails;
            } catch (error) {
                console.error('Error fetching details of nearby carpark', error);
                return [];
            }
        }

        async function getDistanceInformation(lat1, lon1, lat2, lon2) {
            try {
                const response = await fetch(`/calculate-distance?lat1=${lat1}&lon1=${lon1}&lat2=${lat2}&lon2=${lon2}`);
                
                // Check if the response is ok (status code in the range 200-299)
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                console.log(`Distance: ${data.distance.toFixed(2)} km`);
                return data.distance;
            } catch (error) {
                console.error('Error fetching distance:', error);
                return null; // or handle the error as needed
            }
        }

        // Function to fetch carpark price details
        async function getCarparkPriceDetails_URA(ppCode) {
            try {
                const response = await fetch(`/api/ura/carpark-price/${ppCode}`);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                console.log('URA Carpark Price Details:', data); // Log the data instead of updating the DOM
            } catch (error) {
                console.error('Error fetching carpark price details:', error);
            }
        }

        // Function to fetch carpark lots details
        async function getCarparkLotsDetails_URA(carparkNo) {
            try {
                const response = await fetch(`/api/ura/carpark-lots/${carparkNo}`);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                console.log('URA Carpark Lots Details:', data); // Log the data instead of updating the DOM
            } catch (error) {
                console.error('Error fetching carpark lot details:', error);
            }
        }

        // Function to fetch all URA carpark coordinates
        async function getAllCarparkCoor_URA() {
            try {
                const response = await fetch('/api/ura/carpark-coordinates');
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                //console.log('URA Carpark coordinates:', data); // Log the data fetched
                return data; // Ensure it returns the data correctly
            } catch (error) {
                console.error('Error fetching carpark coordinates:', error);
                return []; // Return an empty array on error
            }
        }

        // Function to find nearby carparks
        async function findNearbyCarparks_URA(lat, lon, radius = 500) {
            try {
                const response = await fetch(`/api/ura/find-nearby-carparks?lat=${lat}&lon=${lon}&radius=${radius}`);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                return data; // Return the fetched data
            } catch (error) {
                console.error('Error finding nearby carparks:', error);
                return []; // Return an empty array on error
            }
        }

        // Marker color change function
        function setMarkerStyle(marker, isSelected) {
            if (!isSelected) {
                marker.setIcon(L.icon({
                    iconUrl: '/css/images/parkingicon.png',  // URL for selected marker icon
                    iconSize: [40, 40],
                    iconAnchor: [12, 41]
                }));
            } else {
                marker.setIcon(L.icon({
                    iconUrl: '/css/images/parkingicon-selected.png',  // URL for default marker icon
                    iconSize: [55, 55],
                    iconAnchor: [12, 41]
                }));
            }
        }

        // Variable to keep track of the currently selected carpark ID
        let selectedCarparkId = null; 

        function populateCarparkSidebar(carparks, markers) {

            const checkDistance = document.getElementById('filter-distance').checked;
            const checkPrice = document.getElementById('filter-price').checked;
            const checkLots = document.getElementById('filter-lots').checked;

            if (checkDistance) carparks = filterByDistance(carparks);
            if (checkPrice) carparks = filterByPrice(carparks);
            if (checkLots) carparks = filterByLots(carparks);

            const sidebar = document.getElementById('parking-lots');
            sidebar.innerHTML = '';  // Clear existing content
            
            // Define default and active icons as instances of L.icon
            const defaultIcon = L.icon({
                iconUrl: '/css/images/parkingicon.png', // Set your path here
                iconSize: [40, 40], // Size of the icon
                iconAnchor: [12, 41], // Point of the icon which will correspond to marker's location
                popupAnchor: [1, -34], // Point from which the popup should open relative to the iconAnchor
            });

            const activeIcon = L.icon({
                iconUrl: '/css/images/parkingicon-selected.png', // Set your path here
                iconSize: [60, 60],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
            });

            if (carparks.length > 0) {
                for (let i = 0; i < carparks.length; i++) {
                    const carpark = carparks[i].split(',').map(coord => coord.trim());
                    const carparkNumber = carpark[0];
                    const carparkName = carpark[3];
                    const dist = carpark[4];
                    const price = carpark[5];
                    const parkinglots = carpark[6];
                    
                    // Create collapsible element
                    const collapsible = document.createElement('div');
                    collapsible.className = 'collapsible';
                    collapsible.innerHTML = `
                        <button class="collapsible-btn ${i === 0 ? 'active' : ''}" id="" style="${i === 0 ? 'background-color: green;' : ''}">Carpark ${carparkNumber}: ${carparkName}</button>
                        <div class="collapsible-content ${i === 0 ? 'active' : ''}" style="${i === 0 ? 'display: block; background-color: #c2ffcd;' : 'display: none;'}">
                            <div class="info-item">
                                <img src="/css/images/distance.png" alt="Distance Icon" class="info-icon">
                                <p style="padding-top: 20px;">Distance from destination: <strong>${parseFloat(dist).toFixed(2)}km</strong></p>
                            </div>
                            <div class="info-item">
                                <img src="/css/images/price.png" alt="Price Icon" class="info-icon">
                                <p>Price: <strong>${price}</strong></p>
                            </div>
                            <div class="info-item" style="padding-bottom: 15px;">
                                <img src="/css/images/parkingLots.png" alt="Parkinglot Icon" class="info-icon">
                                <p>Available Parking Lots: <strong>${parkinglots.substring(1)}</strong></p>
                                <button class="select-carpark" data-carpark-id="Carpark-${carparkNumber}">Select</button>
                            </div>
                        </div>`;

                    // Toggle content visibility and style
                    collapsible.querySelector('.collapsible-btn').addEventListener('click', () => {
                        const content = collapsible.querySelector('.collapsible-content');
                        const button = collapsible.querySelector('.collapsible-btn');
                        
                        // Check if the content is currently active (visible)
                        const isActive = content.classList.contains('active');

                        // Toggle visibility
                        if (content.style.display === 'block') {
                            content.style.display = 'none';
                            button.classList.remove('active'); // Remove active class
                            content.classList.remove('active'); // Remove active class from content
                            button.style.backgroundColor = ''; // Reset button color
                            content.style.backgroundColor = ''; // Reset content color
                        } else {
                            content.style.display = 'block';
                            button.classList.add('active'); // Add active class
                            content.classList.add('active'); // Add active class to content
                            button.style.backgroundColor = 'green'; // Change button color to green
                            content.style.backgroundColor = '#c2ffcd'; // Change content color to green
                        }

                        // Set marker icons based on open state of collapsibles
                        markers.forEach((marker, markerIndex) => {
                            const collapsibleContent = sidebar.querySelectorAll('.collapsible-content')[markerIndex];
                            const isContentActive = collapsibleContent.classList.contains('active');
                            marker.setIcon(isContentActive ? activeIcon : defaultIcon);
                        });
                    });

                    // Add event listener for the select button
                    const selectButton = collapsible.querySelector('.select-carpark');
                    selectButton.addEventListener('click', () => {
                        selectCarpark(carpark, markers);
                        selectedCarparkId = `Carpark-${carparkNumber}`;
                        synchronizeButtons();
                    });

                    sidebar.appendChild(collapsible);

                    // Set marker to activeIcon if it’s the first carpark
                    if (markers[i]) {
                        markers[i].setIcon(i === 0 ? activeIcon : defaultIcon);
                    }
                }
            }
        }

        function populateHistSidebar(carparkInfo, markers) {
            const historySidebar = document.getElementById('parking-history');

            // Create collapsible element for the history item
            const historyEntry = document.createElement('div');
            historyEntry.className = 'history-entry';
            // Log carparkInfo to ensure it has the correct structure
            console.log("Carpark Info:", carparkInfo);
            const [carparkNumber, lat, long, carparkName, distance, price, parkingLots] = carparkInfo;
            
            // Check for duplicates in the history sidebar
            const existingEntries = historySidebar.querySelectorAll('.history-entry');
            for (const entry of existingEntries) {
                const entryCarparkId = entry.querySelector('.select-history').dataset.carparkId;
                if (entryCarparkId === `Carpark-${carparkNumber}`) {
                    return; // Exit if the carpark is already in history
                }
            }

            // Create collapsible button and content
            historyEntry.innerHTML = `
                <button class="collapsible-btn">Carpark ${carparkNumber}: ${carparkName}</button>
                <div class="collapsible-content" style="display: none;">
                    <div class="info-item">
                        <img src="/css/images/distance.png" alt="Distance Icon" class="info-icon">
                        <p style="padding-top: 20px;">Distance: <strong>${parseFloat(distance).toFixed(2)}km</strong></p>
                    </div>
                    <div class="info-item">
                        <img src="/css/images/price.png" alt="Price Icon" class="info-icon">
                        <p>Price: <strong>${price}</strong></p>
                    </div>
                    <div class="info-item">
                        <img src="/css/images/parkingLots.png" alt="Parkinglot Icon" class="info-icon">
                        <p style="padding-bottom: 20px;">Available Parking Lots: <strong>${parkingLots.substring(1)}</strong></p>
                    </div>
                    <div class="history-buttons">
                        <button class="select-history" data-carpark-id="Carpark-${carparkNumber}" style="width: 100px;">Select</button>
                        <button class="remove-history" onclick="removeFromHistory(this)" style="width: 100px;">Remove</button>
                    </div>
                </div>
            `;

            // Toggle collapsible content visibility
            historyEntry.querySelector('.collapsible-btn').addEventListener('click', () => {
                const content = historyEntry.querySelector('.collapsible-content');
                const button = historyEntry.querySelector('.collapsible-btn');

                // Check if the content is currently active (visible)
                const isActive = content.style.display === 'block';

                // Toggle visibility
                content.style.display = isActive ? 'none' : 'block';
            });

            // Add event listener for the "Select" button in history sidebar
            const selectHistoryButton = historyEntry.querySelector('.select-history');
            selectHistoryButton.addEventListener('click', function() {
                const carparkNum = carparkNumber; // Get the carpark number
                selectCarpark(carparkInfo, markers); // Call selectCarpark function
                selectedCarparkId = `Carpark-${carparkNumber}`;
                synchronizeButtons();
            });

            // Append the new entry to the history sidebar
            historySidebar.appendChild(historyEntry);
            // console.log("Values:", { carparkNumber, lat, long, carparkName, distance, price, parkingLots });
            // console.log("EMAIL: ", '<%= email %>');
            // Update history to database
            // const testemail = 'test@gmail.com';
            // const newHistoryEntry = {email: email,
            //                         car_park_no: carparkNumber, 
            //                         address: carparkName, 
            //                         x_cord: lat, 
            //                         y_cord: long};

            // updateHistToDB(newHistoryEntry)
        }

        // Update carpark history to database
        async function updateHistToDB(carpark) {
            try {
                console.log("EMAIL: ", email);
                const response = await fetch('/updateHistory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(carpark)
                });
                
                const data = await response.json();
                if (response.ok) {
                    console.log("Successfully added carpark to history database!");  // Success message
                } else {
                    console.error("Error adding carpark to history database.");  // Error message
                }
            } catch (error) {
                console.error("Error updating carpark history:", error);
            }
        }


        // Function to remove an entry from the parking history
        function removeFromHistory(button) {
            const historyEntry = button.closest('.history-entry');
            if (historyEntry) {
                historyEntry.remove(); // Remove the history entry from the sidebar
            }
        }

        // Function to update all select buttons based on selectedCarparkId
        function synchronizeButtons() {
            // Update select buttons in parking-lots sidebar
            const parkingLotButtons = document.querySelectorAll('.select-carpark');
            const historyButtons = document.querySelectorAll('.select-history');

            parkingLotButtons.forEach(button => {
                if (button.dataset.carparkId === selectedCarparkId) {
                    button.style.backgroundColor = 'grey';
                    button.textContent = 'Selected';
                } else {
                    button.style.backgroundColor = '#2196F3';
                    button.textContent = 'Select';
                }
            });

            historyButtons.forEach(button => {
                if (button.dataset.carparkId === selectedCarparkId) {
                    button.style.backgroundColor = 'grey';
                    button.textContent = 'Selected';
                } else {
                    button.style.backgroundColor = '#2196F3';
                    button.textContent = 'Select';
                }
            });

            // Check if the selected carpark exists in the parking-lot sidebar
            const carparkExistsInSidebar = Array.from(parkingLotButtons).some(button => button.dataset.carparkId === selectedCarparkId);

            if (!carparkExistsInSidebar && selectedCarparkId) {
                // Clear parking-lot sidebar and show only the selected carpark from history
                const selectedHistoryButton = Array.from(historyButtons).find(button => button.dataset.carparkId === selectedCarparkId);
                if (selectedHistoryButton) {
                    const carparkInfo = getCarparkInfoFromHistory(selectedHistoryButton);
                    populateCarparkSidebar([carparkInfo], markers);
                }
            }
        }

        // Variables to keep track of the currently selected button and collapsible
        let lastSelectedButton = null;
        let lastSelectedCollapsible = null;
        let currentMarker = null;

        function selectCarpark(carpark, markers) {
           
            // Get the button and collapsible content associated with the clicked carpark
            const button = document.querySelector(`[data-carpark-id="Carpark-${carpark[0]}"]`);
            const collapsibleContent = button.closest('.collapsible-content');
            const collapsibles = document.querySelectorAll('.collapsible-content');

            // Accessing all carpark info
            const carparkNum = carpark[0];
            const lat = parseFloat(carpark[1]);
            const long = parseFloat(carpark[2]);
            const carparkName = carpark[3];
            const distance = carpark[4];
            const price = carpark[5];
            const parkingLots = carpark[6];

            // Populate the history sidebar with carpark info as an array
            populateHistSidebar([carparkNum, lat, long, carparkName, distance, price, parkingLots], markers);

            // Reset the previous button, if one was selected
            if (lastSelectedButton && lastSelectedButton !== button) {
                lastSelectedButton.style.backgroundColor = '#2196F3';
                lastSelectedButton.textContent = 'Select';
            }

            // Close all other collapsibles and hide all markers except the selected one
            collapsibles.forEach((content, index) => {
                const isSelectedContent = content === collapsibleContent;

                content.style.display = isSelectedContent ? 'block' : 'none';
                content.previousElementSibling.style.backgroundColor = isSelectedContent ? 'green' : '';
                content.style.backgroundColor = isSelectedContent ? '#c2ffcd' : '';

            });

            // remove all markers
            markers.forEach(marker => {
                map.removeLayer(marker);
            });

            // Remove the current marker if it exists
            if (currentMarker) {
                map.removeLayer(currentMarker);
            }

            // Add marker for selected carpark
            currentMarker = L.marker([lat, long]).addTo(map);
            setMarkerStyle(currentMarker, true);

            // Center map create bounds to encompass both points
            const carparkLatLng = L.latLng(lat, long);
            // const bounds = L.latLngBounds([searchLatLng,carparkLatLng]);
            map.setView(carparkLatLng, 16);
            // map.fitBounds(bounds);
            getRouteDestToCarPark(userLatLng,carparkLatLng);
            
            // Toggle the current button to "selected" state
            button.style.backgroundColor = 'grey';
            button.textContent = 'Selected';

            // Update the last selected button and collapsible
            lastSelectedButton = button;
            lastSelectedCollapsible = collapsibleContent;
        }


        // Call fetchApiToken when the page loads
        window.onload = function() {
        fetchApiToken();
        };

        // Initialize the map
        $.get("https://www.onemap.gov.sg/maps/json/raster/tilejson/2.2.0/Default.json", function (data) {
            if (map) {
                map.remove();
            }
            map = L.TileJSON.createMap('mapdiv', data);
            map.setMaxBounds(bounds);
            map.setView(L.latLng(1.2868108, 103.8545349), 16);

            // Add attribution
            map.attributionControl.setPrefix('<img src="https://www.onemap.gov.sg/web-assets/images/logo/om_logo.png" style="height:20px;width:20px;"/>&nbsp;<a href="https://www.onemap.gov.sg/" target="_blank" rel="noopener noreferrer">OneMap</a>&nbsp;&copy;&nbsp;contributors&nbsp;&#124;&nbsp;<a href="https://www.sla.gov.sg/" target="_blank" rel="noopener noreferrer">Singapore Land Authority</a>');
            
            // Call functions that need the map to be initialized
            showUserLocation();
            // displayParkingLots(parkingLots);
        });

        function showSuggestions() {
            const searchQuery = document.getElementById('search').value.trim();

            if (searchQuery !== "") {
                const url = `https://www.onemap.gov.sg/api/common/elastic/search?searchVal=${searchQuery}&returnGeom=Y&getAddrDetails=Y&pageNum=1`;

                $.get(url, function (data) {
                    // Clear previous suggestions
                    let autocompleteList = document.getElementById("autocomplete-list");
                    autocompleteList.innerHTML = "";

                    if (data.results.length > 0) {
                        // Create and display suggestions
                        data.results.forEach(result => {
                            let suggestionItem = document.createElement("div");
                            suggestionItem.innerHTML = result.SEARCHVAL;
                            suggestionItem.classList.add("autocomplete-suggestion");

                            // Add click event to use the clicked suggestion
                            suggestionItem.addEventListener("click", function () {
                                document.getElementById('search').value = result.SEARCHVAL;
                                autocompleteList.innerHTML = ""; // Clear the suggestions
                                searchLocation(); // Trigger the search function
                                opensideBar();
                                openhistBar();
                            });

                            // Append the suggestion to the list
                            autocompleteList.appendChild(suggestionItem);
                        });
                    }
                }).fail(function () {
                    console.error("Error fetching autocomplete suggestions from OneMap API.");
                });
            } else {
                // Clear suggestions if no input
                document.getElementById("autocomplete-list").innerHTML = "";
        }}

        async function displayNearbyCarparks_HDB(lat, lon) {
            const central = [
                { code: "ACB", name: "Block 270, 271 Albert Centre" },
                { code: "BBB", name: "Block 232 Bras Basah Complex" },
                { code: "BRB1", name: "Block 665 Tekka Centre" },
                { code: "CY", name: "Block 269, 269A, 269B Cheng Yan Court" },
                { code: "DUXM", name: "Block 1 The Pinnacle @ Duxton" },
                { code: "HLM", name: "Block 531A Upper Cross Street" },
                { code: "KAB", name: "Block 334 Kreta Ayer Road" },
                { code: "KAM", name: "Block 335 Kreta Ayer Road" },
                { code: "KAS", name: "Block 333 Kreta Ayer Road" },
                { code: "PRM", name: "Block 33 Park Crescent" },
                { code: "SLS", name: "Block 4 Sago Lane" },
                { code: "SR1", name: "Block 10 Selegie Road" },
                { code: "SR2", name: "Block 8, 9 Selegie Road" },
                { code: "TPM", name: "Tanjong Pagar Plaza" },
                { code: "UCS", name: "Block 34 Upper Cross Street" },
                { code: "WCB", name: "Block 261, 262, 264 Waterloo Centre" }
            ];

            // Remove the previous circle
            if (circle) {
                map.removeLayer(circle);
                circle = null;
            }

            // Remove the previous carpark markers
            currentCarparks.forEach(marker => {
                map.removeLayer(marker);
            });
            currentCarparks = []; // Reset the array

            // Create a new circle at the destination
            circle = L.circle([lat, lon], 500).addTo(map); // Circle radius is set to 500 meters

            console.log('Fetching HDB carpark coordinates...');
            // Fetch nearby carparks from HDB
            const nearbyCarparksHDB = await findNearbyCarparks_HDB(lat, lon); // Ensure this function fetches data correctly
            
            if (nearbyCarparksHDB.length > 0) {
                for (let i = 0; i < nearbyCarparksHDB.length; i++) {
                    const coords = nearbyCarparksHDB[i].split(',').map(coord => coord.trim());
                    const carparkNumber = coords[0];
                    const latitude = parseFloat(coords[1]);
                    const longitude = parseFloat(coords[2]);
                    const carparkName = coords[3];

                    if (!isNaN(latitude) && !isNaN(longitude)) {
                        
                        const carparkMarker = L.marker([latitude, longitude]).addTo(map)
                            .bindPopup(`<strong>Car Park</strong><br>Coordinates: ${latitude}, ${longitude}`);

                        // Initial marker style
                        setMarkerStyle(carparkMarker, false);

                        let carparkLotsDetails_HDB = await getCarparkLotsDetails_HDB(carparkNumber, carparkName);
                        let availableLots = "N/A"; // Default value if details not found
                        let carparkDistDetails_HDB = await getDistanceInformation(latitude, longitude, userLatLng.lat, userLatLng.lng);
                        carparkDistDetails_HDB = parseFloat(carparkDistDetails_HDB);
                        coords[4] = carparkDistDetails_HDB;
                        const isCentral = central.some(c => c.code === carparkNumber);
                        coords[5] = isCentral ? "$1.20 per half-hour" : "$0.60 per half-hour";
                        coords[6] = carparkLotsDetails_HDB; // Store available lots in coords[6]

                        nearbyCarparksHDB[i] = coords.join(',');

                        carparkMarker.bindPopup(
                            carparkMarker.getPopup().getContent() +
                            `<br><strong>Details:</strong> ${JSON.stringify(carparkLotsDetails_HDB)}` +
                            `<br><strong>Distance:</strong> ${carparkDistDetails_HDB} meters` +
                            `<br><strong>Pricing:</strong> ${coords[5]}` +
                            `<br><strong>Available Lots:</strong> ${availableLots}`
                        );
                        
                        // Store each carpark marker in the array
                        currentCarparks.push(carparkMarker);
                        
                    }
                }
                console.log("HDB Carpark Coordinates with Distance, Pricing, and Availability:", nearbyCarparksHDB);
            } else {
                console.log('No nearby HDB carparks found.');
            }

            populateCarparkSidebar(nearbyCarparksHDB, currentCarparks);
        }

        //store searchMarker
        let searchMarker = null;
        let searchLatLng = null;

        // Update the searchLocation function to use displayNearbyCarParks
        function searchLocation() {
            const searchQuery = document.getElementById('search').value;

            if (searchQuery.trim() !== "") {
                const url = `https://www.onemap.gov.sg/api/common/elastic/search?searchVal=${searchQuery}&returnGeom=Y&getAddrDetails=Y&pageNum=1`;

                $.get(url, function (data) {
                    console.log("Data received from OneMap API:", data);

                    if (data.results && data.results.length > 0) {
                        const firstResult = data.results[0];
                        const lat = parseFloat(firstResult.LATITUDE);
                        const lng = parseFloat(firstResult.LONGITUDE);
                        searchLatLng = L.latLng(lat, lng);

                        console.log("Location found:", lat, lng);

                        // Remove old search marker if it exists
                        if (searchMarker) {
                            map.removeLayer(searchMarker);
                        }

                        if (circle) {
                            map.removeLayer(circle);
                            circle = null;
                        }

                        // Add marker for the searched location
                        searchMarker = L.marker([lat, lng]).addTo(map)
                            .bindPopup(`Search Result: ${firstResult.SEARCHVAL}`)
                            .openPopup();

                        // Center the map to the search result location
                        map.setView([lat, lng], 16);

                        // Call routing function if user's location is available
                        if (userLatLng) {
                            displayNearbyCarparks_HDB(lat, lng);
                            getRoute(userLatLng, searchLatLng);
                        } else {
                            console.error("User location is not available.");
                        }

                    } else {
                        alert("No results found.");
                        console.warn("No results returned from OneMap API.");
                    }
                }).fail(function (error) {
                    alert("Error fetching data from OneMap API.");
                    console.error("Error fetching data from OneMap API:", error);
                });
            } else {
                alert("Please enter a location to search for.");
            }
        }

        // Display parking history
        function displayParkingHistory() {
            const history = [
                { id: 5, title: 'Car Park 5', price: 0.55, distance: 400, availability: 23 }
            ];

            history.forEach(lot => {
                const historyDiv = document.createElement('div');
                historyDiv.classList.add('parking-history');
                historyDiv.innerHTML = `
                    <h3>${lot.title}</h3>
                    <p>Price: $${lot.price} / hour</p>
                    <p>Distance: ${lot.distance}m</p>
                    <p>Availability: ${lot.availability}/50 spots</p>
                    <button>Select</button>
                `;
                document.getElementById('parking-history').appendChild(historyDiv);
            });
        }

        // Get user's location
        function showUserLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    userLatLng = L.latLng(position.coords.latitude, position.coords.longitude);

                    // Add marker for user's location
                    L.marker(userLatLng).addTo(map)
                        .bindPopup('<p id="locationText" class="currloc">Your location</p>')
                        .openPopup();

                    // Center map on user's location
                    map.setView(userLatLng, 16);
                    console.log("User location retrieved:", position.coords.latitude, position.coords.longitude);
                    
                }, function (error) {
                    console.error("Error getting location: ", error.message);
                    alert("Error retrieving your location. Please enable location permissions or check your browser's security settings.");
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        // Declare a variable to store the current route
        let currentRoute;
        let circle = null;            // To store the circle around the destination
        let currentCarparks = [];     // To store the current carpark markers

        // Function to get the route between user location and searched location
        async function getRoute(startLatLng, endLatLng) {
            if (!startLatLng || !endLatLng) {
                console.error("Start or end location is missing.");
                return;
            }

            // Get current date and time for the route request
            const currentDate = new Date();
            const formattedDate = `${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}-${currentDate.getFullYear()}`;
            const formattedTime = `${String(currentDate.getHours()).padStart(2, '0')}${String(currentDate.getMinutes()).padStart(2, '0')}00`;

            // Construct the API URL according to the documentation
            const routeUrl = `https://www.onemap.gov.sg/api/public/routingsvc/route?start=${startLatLng.lat},${startLatLng.lng}&end=${endLatLng.lat},${endLatLng.lng}&routeType=drive`;

            $.ajax({
                url: routeUrl,
                type: 'GET',
                headers: {
                    'Authorization': apiToken //fetch oneMapToken
                },
                success: async function (data) { // Make the success callback async
                    if (data && data.route_geometry) {
                        // Decode the route geometry to get the polyline coordinates
                        const routeCoordinates = decodePolyline(data.route_geometry);

                        // If there is an existing route, remove it
                        if (currentRoute) {
                            map.removeLayer(currentRoute);
                        }

                        // Remove the previous circle
                        if (circle) {
                            map.removeLayer(circle);
                            circle = null;
                        }

                        // Remove the previous carpark markers
                        currentCarparks.forEach(marker => {
                            map.removeLayer(marker);
                        });
                        currentCarparks = []; // Reset the array

                        // Draw the new route on the map
                        currentRoute = L.polyline(routeCoordinates, { color: 'blue', opacity: 0.6, weight: 8 }).addTo(map);
                        circle = L.circle([endLatLng.lat, endLatLng.lng], 500).addTo(map);
                    } else {
                        alert("No route found between the specified locations.");
                    }
                },
                error: function () {
                    alert("Error fetching route from OneMap API.");
                }
            });
        }

        // Function to get the route between user location and searched location
        async function getRouteDestToCarPark(startLatLng, endLatLng) {
            if (!startLatLng || !endLatLng) {
                console.error("Start or end location is missing.");
                return;
            }

            // Get current date and time for the route request
            const currentDate = new Date();
            const formattedDate = `${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}-${currentDate.getFullYear()}`;
            const formattedTime = `${String(currentDate.getHours()).padStart(2, '0')}${String(currentDate.getMinutes()).padStart(2, '0')}00`;

            // Construct the API URL according to the documentation
            const routeUrl = `https://www.onemap.gov.sg/api/public/routingsvc/route?start=${startLatLng.lat},${startLatLng.lng}&end=${endLatLng.lat},${endLatLng.lng}&routeType=drive`;

            $.ajax({
                url: routeUrl,
                type: 'GET',
                headers: {
                    'Authorization': apiToken //fetch oneMapToken
                },
                success: async function (data) { // Make the success callback async
                    if (data && data.route_geometry) {
                        // Decode the route geometry to get the polyline coordinates
                        const routeCoordinates = decodePolyline(data.route_geometry);

                        // If there is an existing route, remove it
                        if (currentRoute) {
                            map.removeLayer(currentRoute);
                        }

                        // Remove the previous circle
                        if (circle) {
                            map.removeLayer(circle);
                            circle = null;
                        }

                        // Remove the previous carpark markers
                        currentCarparks.forEach(marker => {
                            map.removeLayer(marker);
                        });
                        currentCarparks = []; // Reset the array

                        // Draw the new route on the map
                        currentRoute = L.polyline(routeCoordinates, { color: '#3BCF00', opacity: 0.8, weight: 8 }).addTo(map);
                    } else {
                        alert("No route found between the specified locations.");
                    }
                },
                error: function () {
                    alert("Error fetching route from OneMap API.");
                }
            });
        }

        //event listeners

        // Event listener to the search button or input field
        document.getElementById('search').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                searchLocation();
            }
        });

        //Event listener for changes in filters
        document.getElementById('filter-distance').addEventListener('change', updateSidebar(carparks, markers));
        document.getElementById('filter-price').addEventListener('change', updateSidebar(carparks, markers));
        document.getElementById('filter-lots').addEventListener('change', updateSidebar(carparks, markers));

    </script>
    <script type='text/javascript' src="/js/Index_Functions.js"></script>
</body>
</html>
