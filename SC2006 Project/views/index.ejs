<!DOCTYPE html>
<html>
<head>
    <title>User Map View</title>
    <link rel="stylesheet" href="https://www.onemap.gov.sg/web-assets/libs/leaflet/leaflet.css" />
    <script src="https://www.onemap.gov.sg/web-assets/libs/leaflet/onemap-leaflet.js"></script>
    <script src="https://www.onemap.gov.sg/web-assets/libs/leaflet/leaflet-tilejson.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=search" />
    <link rel="stylesheet" href="\css\styles_user.css">
</head>

<body onload="changeLanguage()">
    <!-- Header with logo, search bar, filter, and login/register -->
    <div class="header">
        <!-- Logo -->
        <img src="\css\images\logo.jpg" alt="Logo" class="logo">

        <!-- Search bar with search icon -->
        <div class="search-bar">
            <form autocomplete="off" onsubmit="event.preventDefault(); searchLocation();">
                <input class="search-input" type="search" id="search" placeholder="Search for parking lots" oninput="showSuggestions()" autocomplete="off">
                <div id="autocomplete-list" class="autocomplete-items"></div> <!-- Autocomplete suggestion list -->
                <button type="submit" class="search-icon-btn">
                    <img src="\css\images\icons\search.png" alt="Search">
                </button>
            </form>
        </div>
        
        <!-- Filter dropdown -->
        <button class="filter-button" onclick="toggleFilterDropdown()">
            <img src="\css\images\icons\filter.png" class="filter-icon">
            <span class="filter-caption">Filter</span>
            <div class="filter-dropdown" id="filtersDropdown">
                <div class="filter-item">
                    <div class="filter-slider">
                        <label class="switch">
                            <input type="checkbox" id="filter-distance">
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="filter-text">
                        <span class="slider-text">Distance</span>
                    </div>
                </div>
                <div class="filter-item">
                    <div class="filter-slider">
                        <label class="switch">
                            <input type="checkbox" id="filter-price">
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="filter-text">
                        <span class="slider-text">Cheapest Carpark</span>
                    </div>
                </div>
                <div class="filter-item">
                    <div class="filter-slider">
                        <label class="switch">
                            <input type="checkbox" id="filter-lots">
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="filter-text">
                        <span class="slider-text">Parking Lots</span>
                    </div>
                </div>
            </div>
        </button>
        
        <!-- Profile and Language Setting -->
        <button class="profile-settings" onclick="openprofileBar()">
            <img src="\css\images\icons\settings.png" class="settings-icon">
            <span class="profile-caption">Settings</span>
        </button>
            
        <!-- Logout icon -->
        <button class="logout-btn w3-button" onclick="logout()">
            <img src="\css\images\icons\logout.png" class="login-icon">
            <span class="logout-caption">Logout</span>
        </button>
    </div>

    <div class="content">
        <!-- Sidebar for parking lots -->
        <div class ="sidebar sidebar-hidden" id="sidebar">
            <!-- <img src="\css\images\icons\close.png" class="close-icon" onclick="closesideBar()"> -->
            <h2 class="parkinglotsHeader">Parking Lots Found</h2>
            <div id="parking-lots">
                <!-- Parking lot info will be dynamically added here -->
            </div>
            <button class="exit-button" onclick="closesideBar()">Close</button>
        </div>

        <!-- settings sidebar -->
        <div class ="profile-sidebar" id="profile-bar">
            <img src="\css\images\icons\close.png" class="close-icon" onclick="closeprofileBar()">
            <h2 class="profile-header-text">User Profiles and Settings</h2>
            <img src="\css\images\icons\account_icon.png" class="user-profile-pic">
            <h1 class="profile-sider-username" id="welcomeText"></h1>
            <h1 class="profile-sider-username" id="name-display"><%= name %></h1>
            <h2 class="profile-sider-username" id="email-display"><%= email %></h2>

            <div class="language-selector">
                <label for="languageDropdown" class="selectLanguage">Select Language:</label>
                <select id="languageDropdown" onchange="changeLanguage()">
                    <option value="en" selected>English</option>
                    <option value="zh">中文 (Chinese)</option>
                    <option value="ms">Malay</option>
                    <option value="ta">தமிழ் (Tamil)</option>
                </select>
            </div>
            <div class="user-hist">
                <button class="user-history-btn" onclick="openhistBar(); fetchUserHistory(email);">View History</button>
            </div>
        </div>

        <!-- MAP -->
        <div id='mapdiv'></div>

        <!-- Right sidebar for parking history -->
        <div id="histbar" class="history-sidebar histbar-hidden">
            <img src="\css\images\icons\close.png" class="close-icon" onclick="closehistBar()">
            <h2>Parking History</h2>
            <div id="parking-history">
                <!-- Parking history info will be dynamically added here -->
            </div>
        </div>
    </div>

    <script>
        //Global variables
        let sw = L.latLng(1.144, 103.535);
        let ne = L.latLng(1.494, 104.502);
        let bounds = L.latLngBounds(sw, ne);
        let map, userLatLng;

        // Variables to keep track of the currently selected button and collapsible
        let lastSelectedButton = null;
        let lastSelectedCollapsible = null;
        let currentMarker = null;

        // Variable to keep track of the currently selected carpark ID
        let selectedCarparkId = null; 
        let historyRecord = [];

        //Variable to store the search coordinates
        let searchLat;
        let searchLong;

        //store searchMarker
        let searchMarker = null;
        let searchLatLng = null;

        //Store email of user
        let email= '<%=email%>';

        // Declare a variable to store the current route
        let currentRoute;
        let circle = null;            // To store the circle around the destination
        let currentCarparks = [];     // To store the current carpark markers


        // Fetch the token when the page loads
        let apiToken;

        async function fetchApiToken() {
        try {
            const response = await fetch('/api/token');
            if (!response.ok) {
                throw new Error('Failed to fetch token');
            }
            const data = await response.json();
            apiToken = data.token; // Store the token
        } catch (error) {
            console.error('Error fetching token:', error);
        }}
     
        // Fetch API token and initialize the map when the page loads
        window.onload = function() {
        fetchApiToken();
        initializeMap();
        };

        //DO NOT MOVE THESE CODES: THEY WILL NOT FUNCTION IF NOT IN MAIN CODE
        
        // Function to populate carpark data from database in history sidebar
        async function populateCarparkDataFromDB(carparks) {
            if (carparks.length > 0) {
                for (let i = 0; i < carparks.length; i++) {
                    const carpark = carparks[i];
                    console.log("CARPARK: ", carpark);
                    const carparkNumber = carpark.car_park_no;
                    const carparkName = carpark.address;
                    const latitude = carpark.x_cord; 
                    const longitude = carpark.y_cord;
                    let parkingLots = "N/A";
                    let distance = "N/A";
                    let price = "N/A";
                    let carparkMarker 
                
                    if (!isNaN(latitude) && !isNaN(longitude)) {

                        // Initialise marker
                        carparkMarker = L.marker([latitude, longitude]);
                        setMarkerStyle(carparkMarker, false);

                        parkingLots = await getCarparkLotsDetails_HDB(carparkNumber, carparkName);
                        distance = await getDistanceInformation(latitude, longitude, userLatLng.lat, userLatLng.lng);
                        distance = parseFloat(distance);
                        const isCentral = central.some(c => c.code === carparkNumber);
                        price = isCentral ? "$1.20 per half-hour" : "$0.60 per half-hour";
                    }

                    console.log("DIST: ", distance);
                    console.log("PRICE: ", price);
                    console.log("LOTS: ", parkingLots);

                    // Push the results for the current carpark into the results array
                    populateHistSidebar([carparkNumber, latitude, longitude, carparkName, distance, price, parkingLots], [carparkMarker]);
                    
                }
            }
        }
        
        // Function to display parking history
        function displayParkingHistory() {
            const history = [
                { id: 5, title: 'Car Park 5', price: 0.55, distance: 400, availability: 23 }
            ];
            history.forEach(lot => {
                const historyDiv = document.createElement('div');
                historyDiv.classList.add('parking-history');
                historyDiv.innerHTML = `
                    <h3>${lot.title}</h3>
                    <p>Price: $${lot.price} / hour</p>
                    <p>Distance: ${lot.distance}m</p>
                    <p>Availability: ${lot.availability}/50 spots</p>
                    <button>Select</button>
                `;
                document.getElementById('parking-history').appendChild(historyDiv);
            });
        }

        // Function to fetch user history from the database
        async function fetchUserHistory(email) {
                try {
                    const response = await fetch(`/userHistory/${email}`); // Adjust the URL as necessary
                    const historyData = await response.json(); // Parse the JSON response
                    console.log("FETCHED USER HIST: ", historyData);
                    // Process the history data (you may want to call another function to display it)
                    populateCarparkDataFromDB(historyData);
                } catch (error) {
                    console.error("Error fetching user history:", error);
                }
            }

        // Update carpark history to database
        async function updateHistToDB(carpark) {
            try {
                // console.log("EMAIL: ", email);
                const response = await fetch('/updateHistory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(carpark)
                });
                const result = await response.json(); // Assuming your API returns the new history record
                console.log("New history record ID:", result._id);
                return result._id; // Store this ID for future reference
            } catch (error) {
                console.error("Error updating carpark history:", error);
            }
        }

        // Function to remove an entry from the parking history
        async function removeFromHistory(button) {
            const historyEntry = button.closest('.history-entry');
            if (historyEntry) {
                const historyId = historyEntry.dataset.historyId; // Retrieve the history ID
                console.log("Removing history record ID:", historyId);

                // Call your API to delete the history entry from the database
                await deleteHistoryEntryFromDB(historyId); // Assuming this function handles deletion

                historyEntry.remove(); // Remove the history entry from the sidebar
            }
        }

        // Delete carpark history from database
        async function deleteHistoryEntryFromDB(id) {
            try {
                const response = await fetch('/deleteHistory/' + id, {
                    method: 'DELETE', // Use DELETE method for deletion
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id }) // Send the ID to delete
                });

                const result = await response.json();
                console.log(result.message); // Log success message

            } catch (error) {
                console.error("Error deleting history entry:", error);
            }
        }

        async function populateHistSidebar(carparkInfo, markers) {
            const historySidebar = document.getElementById('parking-history');

            // Create collapsible element for the history item
            const historyEntry = document.createElement('div');
            historyEntry.className = 'history-entry';

            // Log carparkInfo to ensure it has the correct structure
            console.log("Carpark Info:", carparkInfo);
            const [carparkNumber, lat, long, carparkName, distance, price, parkingLots] = carparkInfo;
            
            // Check for duplicates in the history sidebar
            const existingEntries = historySidebar.querySelectorAll('.history-entry');
            for (const entry of existingEntries) {
                const entryCarparkId = entry.querySelector('.select-history').dataset.carparkId;
                if (entryCarparkId === `Carpark-${carparkNumber}`) {
                    return; // Exit if the carpark is already in history
                }
            }

            console.log("HIST PARKING DETAILS: ", parkingLots);
            let formattedParkingLots='';
            try {
                formattedParkingLots = parkingLots
                    .map(lot => {
                        if (lot && lot.lot_type && typeof lot.available !== 'undefined') {
                            return `Lot Type ${lot.lot_type}: ${lot.available}`;
                        } else {
                            throw new Error('Invalid lot data');
                        }
                    })
                    .join('<br>');
            } catch (error) {
                console.error("Error formatting parking lots:", error.message);
                formattedParkingLots = 'Info not available';
            }

            // Create collapsible button and content
            historyEntry.innerHTML = `
                <button class="collapsible-btn">Carpark ${carparkNumber}: ${carparkName}</button>
                <div class="collapsible-content" style="display: none;">
                    <div class="info-item">
                        <img src="/css/images/distance.png" alt="Distance Icon" class="info-icon">
                        <p style="padding-top: 20px;">Distance: <strong>${parseFloat(distance).toFixed(2)}km</strong></p>
                    </div>
                    <div class="info-item">
                        <img src="/css/images/price.png" alt="Price Icon" class="info-icon">
                        <p>Price: <strong>${price}</strong></p>
                    </div>
                    <div class="info-item">
                        <img src="/css/images/parkingLots.png" alt="Parkinglot Icon" class="info-icon">
                        <p style="padding-bottom: 20px;">Available Parking Lots:\n<strong>${formattedParkingLots}</strong></p>
                    </div>
                    <div class="history-buttons">
                        <button class="select-history" data-carpark-id="Carpark-${carparkNumber}" style="width: 100px;">Select</button>
                        <button class="remove-history" onclick="removeFromHistory(this)" style="width: 100px;">Remove</button>
                    </div>
                </div>
            `;

            // Update history to database
            const newHistoryEntry = {email: '<%=email%>',
                                    car_park_no: carparkNumber, 
                                    address: carparkName, 
                                    x_cord: lat, 
                                    y_cord: long};

            const newHistoryID = await updateHistToDB(newHistoryEntry);
            
            // Set the ID as a data attribute on the historyEntry
            historyEntry.dataset.historyId = newHistoryID; // Store the history ID in the entry

            // Append the new entry to the history sidebar
            historySidebar.appendChild(historyEntry);

            // Toggle collapsible content visibility
            historyEntry.querySelector('.collapsible-btn').addEventListener('click', () => {
                const content = historyEntry.querySelector('.collapsible-content');
                const button = historyEntry.querySelector('.collapsible-btn');

                // Check if the content is currently active (visible)
                const isActive = content.style.display === 'block';

                // Toggle visibility
                content.style.display = isActive ? 'none' : 'block';
            });

            // Add event listener for the "Select" button in history sidebar
            const selectHistoryButton = historyEntry.querySelector('.select-history');
            selectHistoryButton.addEventListener('click', function() {
                const carparkNum = carparkNumber; // Get the carpark number
                selectCarpark(carparkInfo, markers); // Call selectCarpark function
                selectedCarparkId = `Carpark-${carparkNumber}`;
                synchronizeButtons();
            });

            historyRecord.push(newHistoryID);
        }

        //Event listeners

        // Event listener for distance filter
        $(document).ready(function() {
            $('#filter-distance').change(function() {
                if (this.checked) {
                    console.log('Checkbox is checked');
                    $('#parking-lots').empty().load(location.href + ' #parking-lots');
                } else {
                    console.log('Checkbox is unchecked');
                    $('#parking-lots').empty().load(location.href + ' #parking-lots')
                }
                displayNearbyCarparks_HDB(searchLat, searchLong);
            });
        });

        // Event listener for price filter
        $(document).ready(function() {
            $('#filter-price').change(function() {
                if (this.checked) {
                    console.log('Checkbox is checked');
                    $('#parking-lots').empty().load(location.href + ' #parking-lots');
                } else {
                    console.log('Checkbox is unchecked');
                    $('#parking-lots').empty().load(location.href + ' #parking-lots')
                }
                displayNearbyCarparks_HDB(searchLat, searchLong);
            });
        });

        // Event listener for lots filter
        $(document).ready(function() {
            $('#filter-lots').change(function() {
                if (this.checked) {
                    console.log('Checkbox is checked');
                    $('#parking-lots').empty().load(location.href + ' #parking-lots');
                } else {
                    console.log('Checkbox is unchecked');
                    $('#parking-lots').empty().load(location.href + ' #parking-lots')
                }
                displayNearbyCarparks_HDB(searchLat, searchLong);
            });
        });

    </script>
    <script type='text/javascript' src="/MapInterface.js"></script>
    <script type='text/javascript' src="/js/Index_Functions.js"></script>
    <script type='text/javascript' src="/NavigationManager.js"></script>
    <script type='text/javascript' src="/SearchManager.js"></script>
    <script type='text/javascript' src="/UserManager.js"></script>
    <script type='text/javascript' src="/carParkRoutes.js"></script>

</body>
</html>
