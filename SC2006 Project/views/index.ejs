<html>
<head>
    <title>User Map View</title>
    <link rel="stylesheet" href="https://www.onemap.gov.sg/web-assets/libs/leaflet/leaflet.css" />
    <script src="https://www.onemap.gov.sg/web-assets/libs/leaflet/onemap-leaflet.js"></script>
    <script src="https://www.onemap.gov.sg/web-assets/libs/leaflet/leaflet-tilejson.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=search" />
    <link rel="stylesheet" href="\css\styles_user.css">
</head>

<body onload="changeLanguage()">
    <!-- Header with logo, search bar, filter, and login/register -->
    <div class="header">
        <!-- Logo -->
        <img src="\css\images\logo.jpg" alt="Logo" class="logo">

        <!-- Search bar with search icon -->
        <div class="search-bar">
            <form autocomplete="off" onsubmit="event.preventDefault(); searchLocation();">
                <input class="search-input" type="search" id="search" placeholder="Search for parking lots" oninput="showSuggestions()" autocomplete="off">
                <!-- Autocomplete suggestion list -->
                <div id="autocomplete-list" class="autocomplete-items"></div>
                <button type="submit" class="search-icon-btn">
                    <img src="\css\images\icons\search.png" alt="Search">
                </button>
            </form>
        </div>
        
        <!-- Filter dropdown -->
        <button class="filter-button w3-button" onclick="toggleFilterDropdown()">
            <img src="\css\images\icons\filter.png" class="filter-icon">
            <span class="filter-caption">Filter</span>
            <div class="filter-dropdown" id="filtersDropdown">
                <div>
                    <label class="switch">
                        <input type="checkbox" id="toggle-distance" onchange="toggleDistance()">
                        <span class="slider round"></span>
                    </label>
                </div>
                <div class="slider-text">Distance</div>
                <div>
                    <label class="switch">
                        <input type="checkbox" id="toggle-price" onchange="togglePrice()">
                        <span class="slider round"></span>
                    </label>
                </div>
                <div class="slider-text">Cheapest Carpark</div>
                <div>
                    <label class="switch" >
                        <input type="checkbox" id="toggle-avaliableLots" onchange="toggleAvailableLots()">
                        <span class="slider round"></span>
                    </label>
                </div>
                <div class="slider-text">Parking Lots</div>
            </div>
        </button>   
        
        <!-- Profile and Language Setting -->
        <button class="profile-settings" onclick="openprofileBar()">
            <img src="\css\images\icons\settings.png" class="settings-icon">
            <span class="profile-caption">Settings</span>
        </button>
            
        <!-- Logout icon -->
        <button class="logout-btn w3-button" onclick="logout()">
            <img src="\css\images\icons\logout.png" class="login-icon">
            <span class="logout-caption">Logout</span>
        </button>
    </div>

    <div class="content">
        <!-- Sidebar for parking lots -->
        <div class ="sidebar" id="sidebar">
            <h2 class="parkinglotsHeader">Parking Lots Found</h2>
            <div id="parking-lots"></div>
            <button class="exit-button" onclick="closesideBar()">Exit</button>
        </div>

        <!-- settings sidebar -->
        <div class ="profile-sidebar" id="profile-bar">
            <img src="\css\images\icons\close.png" class="close-icon" onclick="closeprofileBar()">
            <h2 class="profile-header-text">User Profiles and Settings</h2>
            <img src="\css\images\icons\account_icon.png" class="user-profile-pic">
            <h1 class="profile-sider-username" id="welcomeText"></h1>
            <h1 class="profile-sider-username" id="name-display"><%= name %></h1>
            <h2 class="profile-sider-username" id="email-display">Placeholder Email</h2>
          
            <div>
                <div class="language-selector">
                    <label for="languageDropdown" class="selectLanguage">Select Language:</label>
                    <select id="languageDropdown" onchange="changeLanguage()">
                        <option value="en" selected>English</option>
                        <option value="zh">中文 (Chinese)</option>
                        <option value="ms">Malay</option>
                        <option value="ta">தமிழ் (Tamil)</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- MAP -->
        <div id='mapdiv'></div>

        <!-- Right sidebar for parking history -->
        <div class="history-sidebar">
            <h2>Parking History</h2>
            <div id="parking-history">
                <!-- Parking history info will be dynamically added here -->
            </div>
        </div>
    </div>

    <script>
        let sw = L.latLng(1.144, 103.535);
        let ne = L.latLng(1.494, 104.502);
        let bounds = L.latLngBounds(sw, ne);
        let map, userLatLng;

        // Fetch the token when the page loads
        let apiToken;

        async function fetchApiToken() {
        try {
            const response = await fetch('/api/token');
            if (!response.ok) {
                throw new Error('Failed to fetch token');
            }
            const data = await response.json();
            apiToken = data.token; // Store the token
        } catch (error) {
            console.error('Error fetching token:', error);
        }
        }

                // Access key for URA API
        const uraAccessKey = '18ee826a-2210-4a40-972e-3a1e3c317ba0';
<<<<<<< HEAD
        const token = 'd3@ebNc-V5628AaS2+7FkzD1x7ab002WFehG1Hfb52fXaYj4+6c3a2-EJB3ea723-4q231t+32a3c8C1GXxFa4up8aa-Wt3e7918';
        
/*
async function fetchURAToken() {
=======
        let uraToken = 'd3@ebNc-V5628AaS2+7FkzD1x7ab002WFehG1Hfb52fXaYj4+6c3a2-EJB3ea723-4q231t+32a3c8C1GXxFa4up8aa-Wt3e7918';

    async function fetchURAToken() {
>>>>>>> 51ff68d (Update)
    try {
        const response = await fetch('https://www.ura.gov.sg/uraDataService/insertNewToken.action', {
            headers: { 'AccessKey': uraAccessKey }
        });
        const data = await response.json();
        if (data.Status === 'Success') {
            uraToken = data.Result;
            console.log("URA Token retrieved successfully:", token);
        } else {
            console.error("Failed to retrieve URA token:", data.Message);
        }
    } catch (error) {
        console.error("Error fetching URA token:", error);
    }
}

    async function getURACarParkListAndRates() {
    if (!uraToken) await fetchURAToken();

    try {
        const response = await fetch('https://www.ura.gov.sg/uraDataService/invokeUraDS?service=Car_Park_Details', {
            headers: {
                'AccessKey': uraAccessKey,
                'Token': uraToken
            }
        });
        const data = await response.json();

        if (data.Status === 'Success') {
            return data.Result; // This should contain the list of car parks with details
        } else {
            console.error("Failed to retrieve URA car park list:", data.Message);
            return [];
        }
    } catch (error) {
        console.error("Error fetching URA car park list:", error);
        return [];
    }
}

    async function displayURACarParksOnMap(lat, lon) {
    const uraCarParks = await getURACarParkListAndRates();

    console.log("Retrieved URA Car Park List:", uraCarParks);

    uraCarParks.forEach(carPark => {
        const carParkLat = parseFloat(carPark.coordinates[0].latitude);
        const carParkLon = parseFloat(carPark.coordinates[0].longitude);
        const distance = getDistanceFromLatLonInKm(lat, lon, carParkLat, carParkLon);

        if (distance <= 0.5) {  // Display car parks within 500 meters
                const marker = L.marker([carParkLat, carParkLon]).addTo(map)
                    .bindPopup(`
                        <strong>URA Car Park</strong><br>
                        Car Park No: ${carPark.carparkNo}<br>
                        Weekday Rate: ${carPark.weekdayRate}<br>
                        Saturday Rate: ${carPark.saturdayRate}<br>
                        Sunday/PH Rate: ${carPark.sundayPublicHolidayRate}<br>
                        Parking System: ${carPark.parkingSystem}<br>
                        Location: ${carPark.gpsName}
                    `);

            const parkingLotDiv = document.createElement('div');
            parkingLotDiv.classList.add('parking-lot');
            parkingLotDiv.innerHTML = `
                <h3>URA Car Park ${carPark.carparkNo}</h3>
                <p>Weekday Rate: ${carPark.weekdayRate}</p>
                <p>Saturday Rate: ${carPark.saturdayRate}</p>
                <p>Sunday/PH Rate: ${carPark.sundayPublicHolidayRate}</p>
                <button>Select</button>
            `;
            document.getElementById('parking-lots').appendChild(parkingLotDiv);
        }
    });
}
*/

<<<<<<< HEAD
function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    const R = 6371; // Radius of the Earth in km
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c; // Distance in km
}

function deg2rad(deg) {
    return deg * (Math.PI / 180);
}

        async function getAllCarparkCoor_HDB() {
            try {
                const response = await fetch('/api/carpark-coordinates');
                const data = await response.json(); // Get the coordinates data from the response
                console.log("HDB Carpark Coordinates:", data); // For debugging
                return data; // Return the data for further use
            } catch (error) {
                console.error('Error fetching carpark coordinates:', error);
                return [];
            }
=======
    async function getAllCarparkCoor_HDB() {
        try {
            const response = await fetch('/api/carpark-coordinates');
            const data = await response.json(); // Get the coordinates data from the response
            console.log("Carpark Coordinates:", data); // For debugging
            return data; // Return the data for further use
        } catch (error) {
            console.error('Error fetching carpark coordinates:', error);
            return [];
>>>>>>> 51ff68d (Update)
        }
    }

<<<<<<< HEAD
        async function findNearbyCarparks_HDB(lat, lon) {
            try {
                const response = await fetch(`/api/find-nearby-carparks?lat=${lat}&lon=${lon}`);
                const data = await response.json(); // Get the nearby carparks data from the response
                console.log("HDB Nearby Carparks:", data); // For debugging
                return data; // Return the data for further use
            } catch (error) {
                console.error('Error fetching nearby carparks:', error);
                return [];
            }
        }
        async function getCarparkLotsDetails_HDB(carparkNum,carparkName){
            try {
                const response = await fetch(`/api/carpark-lots-details/${carparkNum}?carparkName=${encodeURIComponent(carparkName)}`);
                const carParkDetails = await response.json();
                console.log('HDB Lots Detail of nearby carpark:', carParkDetails);
                return carParkDetails;
            } catch (error) {
                console.error('Error fetching details of nearby carpark', error);
                return [];
            }
=======
    async function findNearbyCarparks_HDB(lat, lon) {
        try {
            const response = await fetch(`/api/find-nearby-carparks?lat=${lat}&lon=${lon}`);
            const data = await response.json(); // Get the nearby carparks data from the response
            console.log("Nearby Carparks:", data); // For debugging
            return data; // Return the data for further use
        } catch (error) {
            console.error('Error fetching nearby carparks:', error);
            return [];
        }
    }

    async function getCarparkLotsDetails(carparkNum){
        try {
            const response = await fetch(`/api/carpark-lots-details/${carparkNum}`);
            const carParkDetails = await response.json();
            console.log('Detail of nearby carpark:', carParkDetails);
        } catch (error) {
            console.error('Error fetching details of nearby carpark', error);
            return [];
>>>>>>> 51ff68d (Update)
        }
    }

<<<<<<< HEAD
        async function getDistanceInformation(lat1, lon1, lat2, lon2) {
            try {
                const response = await fetch(`/calculate-distance?lat1=${lat1}&lon1=${lon1}&lat2=${lat2}&lon2=${lon2}`);
                
                // Check if the response is ok (status code in the range 200-299)
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                console.log(`Distance: ${data.distance.toFixed(2)} km`);
                return data.distance;
            } catch (error) {
                console.error('Error fetching distance:', error);
                return null; // or handle the error as needed
=======
    async function getDistanceInformation(lat1, lon1, lat2, lon2) {
        try {
            const response = await fetch(`/calculate-distance?lat1=${lat1}&lon1=${lon1}&lat2=${lat2}&lon2=${lon2}`);
            
            // Check if the response is ok (status code in the range 200-299)
            if (!response.ok) {
                throw new Error('Network response was not ok');
>>>>>>> 51ff68d (Update)
            }

<<<<<<< HEAD
        
// Function to fetch carpark price details
async function getCarparkPriceDetails_URA(ppCode) {
    try {
        const response = await fetch(`/api/ura/carpark-price/${ppCode}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.json();
        console.log('URA Carpark Price Details:', data); // Log the data instead of updating the DOM
    } catch (error) {
        console.error('Error fetching carpark price details:', error);
    }
}

// Function to fetch carpark lots details
async function getCarparkLotsDetails_URA(carparkNo) {
    try {
        const response = await fetch(`/api/ura/carpark-lots/${carparkNo}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.json();
        console.log('URA Carpark Lots Details:', data); // Log the data instead of updating the DOM
    } catch (error) {
        console.error('Error fetching carpark lot details:', error);
    }
}

// Function to fetch all URA carpark coordinates
async function getAllCarparkCoor_URA() {
    try {
        const response = await fetch('/api/ura/carpark-coordinates');
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.json();
        //console.log('URA Carpark coordinates:', data); // Log the data fetched
        return data; // Ensure it returns the data correctly
    } catch (error) {
        console.error('Error fetching carpark coordinates:', error);
        return []; // Return an empty array on error
    }
}



// Function to find nearby carparks
async function findNearbyCarparks_URA(lat, lon, radius = 500) {
    try {
        const response = await fetch(`/api/ura/find-nearby-carparks?lat=${lat}&lon=${lon}&radius=${radius}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.json();
        return data; // Return the fetched data
    } catch (error) {
        console.error('Error finding nearby carparks:', error);
        return []; // Return an empty array on error
    }
}

        // Call fetchApiToken when the page loads
        window.onload = function() {
        fetchApiToken();
        };
=======
            const data = await response.json();
            console.log(`Distance: ${distance.toFixed(2)} km`);
            return data.distance;
        } catch (error) {
            console.error('Error fetching distance:', error);
            return null; // or handle the error as needed
        }
    }

    // Call fetchApiToken when the page loads
    window.onload = function() {
    fetchApiToken();
    };
>>>>>>> 51ff68d (Update)

        // Initialize the map
        $.get("https://www.onemap.gov.sg/maps/json/raster/tilejson/2.2.0/Default.json", function (data) {
            if (map) {
                map.remove();
            }
            map = L.TileJSON.createMap('mapdiv', data);
            map.setMaxBounds(bounds);
            map.setView(L.latLng(1.2868108, 103.8545349), 16);

            // Add attribution
            map.attributionControl.setPrefix('<img src="https://www.onemap.gov.sg/web-assets/images/logo/om_logo.png" style="height:20px;width:20px;"/>&nbsp;<a href="https://www.onemap.gov.sg/" target="_blank" rel="noopener noreferrer">OneMap</a>&nbsp;&copy;&nbsp;contributors&nbsp;&#124;&nbsp;<a href="https://www.sla.gov.sg/" target="_blank" rel="noopener noreferrer">Singapore Land Authority</a>');

            // Call functions that need the map to be initialized
            //displayParkingLots(parkingLots);
            
            displayParkingHistory();
            showUserLocation();
        });

        /*
        // Parking lot data
        const parkingLots = [
            { id: 1, lat: 1.3521, lng: 103.8198, title: 'Car Park 1', price: 0.50, distance: 200, availability: 37 },
            { id: 2, lat: 1.3531, lng: 103.8190, title: 'Car Park 2', price: 0.60, distance: 300, availability: 25 },
            { id: 3, lat: 1.3541, lng: 103.8185, title: 'Car Park 3', price: 0.55, distance: 400, availability: 23 }
        ];

        // Display parking lots on map
    function displayParkingLots(parkingLots) {
            if (!map) {
                console.error("Map is not initialized yet.");
                return;
            }

            parkingLots.forEach(lot => {
                if (lot.lat && lot.lng) {
                    const marker = L.marker([lot.lat, lot.lng]).addTo(map)
                        .bindPopup(`<strong>${lot.title}</strong><br>Price: $${lot.price}/hour<br>Distance: ${lot.distance}m<br>Availability: ${lot.availability}/50`);

                    // Append parking lot info to sidebar
                    const parkingLotDiv = document.createElement('div');
                    parkingLotDiv.classList.add('parking-lot');
                    parkingLotDiv.innerHTML = `
                        <h3>${lot.title}</h3>
                        <p>Price: $${lot.price} / hour</p>
                        <p>Distance: ${lot.distance}m</p>
                        <p>Availability: ${lot.availability}/50 spots</p>
                        <button>Select</button>
                    `;
                    document.getElementById('parking-lots').appendChild(parkingLotDiv);
                } else {
                    console.error("Invalid parking lot data: missing latitude or longitude.", lot);
                }
            });
        }
<<<<<<< HEAD
        */
        function showSuggestions() {
=======
        
    function showSuggestions() {
>>>>>>> 51ff68d (Update)
        const searchQuery = document.getElementById('search').value.trim();

        if (searchQuery !== "") {
            const url = `https://www.onemap.gov.sg/api/common/elastic/search?searchVal=${searchQuery}&returnGeom=Y&getAddrDetails=Y&pageNum=1`;

            $.get(url, function (data) {
                // Clear previous suggestions
                let autocompleteList = document.getElementById("autocomplete-list");
                autocompleteList.innerHTML = "";

                if (data.results.length > 0) {
                    // Create and display suggestions
                    data.results.forEach(result => {
                        let suggestionItem = document.createElement("div");
                        suggestionItem.innerHTML = result.SEARCHVAL;
                        suggestionItem.classList.add("autocomplete-suggestion");

                        // Add click event to use the clicked suggestion
                        suggestionItem.addEventListener("click", function () {
                            document.getElementById('search').value = result.SEARCHVAL;
                            autocompleteList.innerHTML = ""; // Clear the suggestions
                            searchLocation(); // Trigger the search function
                        });

                        // Append the suggestion to the list
                        autocompleteList.appendChild(suggestionItem);
                    });
                }
            }).fail(function () {
                console.error("Error fetching autocomplete suggestions from OneMap API.");
            });
        } else {
            // Clear suggestions if no input
            document.getElementById("autocomplete-list").innerHTML = "";
        }}
        
        //store searchMarker
        let searchMarker = null;
        // Function to search for locations using OneMap API
 
/*
        // Function to display both URA and HDB car parks near a specific location
    async function displayNearbyCarParks(lat, lon) {
        // Fetch URA and HDB car park data
        const uraCarParks = await getURACarParkAvailability();
        const hdbCarParks = await findNearbyCarparks_HDB(lat, lon);

    // Clear existing parking lots in the sidebar
    document.getElementById('parking-lots').innerHTML = '';

    // Display URA car parks
    uraCarParks.forEach(carPark => {
        const carParkLat = parseFloat(carPark.latitude);
        const carParkLon = parseFloat(carPark.longitude);
        const distance = getDistanceFromLatLonInKm(lat, lon, carParkLat, carParkLon);

        if (distance <= 0.5) {  // Adjust radius as needed
            // Add marker on the map
            const marker = L.marker([carParkLat, carParkLon]).addTo(map)
                .bindPopup(`<strong>URA Car Park</strong><br>Car Park No: ${carPark.carparkNo}<br>Available Lots: ${carPark.lotsAvailable}`);

            // Add to sidebar
            const parkingLotDiv = document.createElement('div');
            parkingLotDiv.classList.add('parking-lot');
            parkingLotDiv.innerHTML = `
                <h3>URA Car Park ${carPark.carparkNo}</h3>
                <p>Available Lots: ${carPark.lotsAvailable}</p>
                <button>Select</button>
            `;
            document.getElementById('parking-lots').appendChild(parkingLotDiv);
        }
    });

    // Display HDB car parks
    hdbCarParks.forEach(carPark => {
        const [carParkNo, latStr, lonStr] = carPark.split(',').map(coord => coord.trim());
        const carParkLat = parseFloat(latStr);
        const carParkLon = parseFloat(lonStr);
        const distance = getDistanceFromLatLonInKm(lat, lon, carParkLat, carParkLon);

        if (distance <= 0.5) {  // Adjust radius as needed
            // Add marker on the map
            const marker = L.marker([carParkLat, carParkLon]).addTo(map)
                .bindPopup(`<strong>HDB Car Park</strong><br>Car Park No: ${carParkNo}<br>Availability: Check Details`);

            // Add to sidebar
            const parkingLotDiv = document.createElement('div');
            parkingLotDiv.classList.add('parking-lot');
            parkingLotDiv.innerHTML = `
                <h3>HDB Car Park ${carParkNo}</h3>
                <p>Availability: Check Details</p>
                <button>Select</button>
            `;
            document.getElementById('parking-lots').appendChild(parkingLotDiv);
        }
    });
}
*/
async function displayNearbyCarparks_HDB(lat, lon) {
    const central = [
        { code: "ACB", name: "Block 270, 271 Albert Centre" },
        { code: "BBB", name: "Block 232 Bras Basah Complex" },
        { code: "BRB1", name: "Block 665 Tekka Centre" },
        { code: "CY", name: "Block 269, 269A, 269B Cheng Yan Court" },
        { code: "DUXM", name: "Block 1 The Pinnacle @ Duxton" },
        { code: "HLM", name: "Block 531A Upper Cross Street" },
        { code: "KAB", name: "Block 334 Kreta Ayer Road" },
        { code: "KAM", name: "Block 335 Kreta Ayer Road" },
        { code: "KAS", name: "Block 333 Kreta Ayer Road" },
        { code: "PRM", name: "Block 33 Park Crescent" },
        { code: "SLS", name: "Block 4 Sago Lane" },
        { code: "SR1", name: "Block 10 Selegie Road" },
        { code: "SR2", name: "Block 8, 9 Selegie Road" },
        { code: "TPM", name: "Tanjong Pagar Plaza" },
        { code: "UCS", name: "Block 34 Upper Cross Street" },
        { code: "WCB", name: "Block 261, 262, 264 Waterloo Centre" }
    ];

    if (circle) {
        map.removeLayer(circle);
        circle = null;
    }
    currentCarparks.forEach(marker => map.removeLayer(marker));
    currentCarparks = [];

    circle = L.circle([lat, lon], 500).addTo(map);
    
    console.log('Fetching HDB carpark coordinates...');
    let nearbyCarparksHDB = await findNearbyCarparks_HDB(lat, lon);

    if (nearbyCarparksHDB.length > 0) {
        for (let i = 0; i < nearbyCarparksHDB.length; i++) {
            const coords = nearbyCarparksHDB[i].split(',').map(coord => coord.trim());
            const carparkNumber = coords[0];
            const latitude = parseFloat(coords[1]);
            const longitude = parseFloat(coords[2]);
            const carparkName = coords[3];

            if (!isNaN(latitude) && !isNaN(longitude)) {
                const carparkMarker = L.marker([latitude, longitude]).addTo(map)
                    .bindPopup(`<strong>Car Park</strong><br>Coordinates: ${latitude}, ${longitude}`);

                let carparkLotsDetails_HDB = await getCarparkLotsDetails_HDB(carparkNumber, carparkName);
                let availableLots = "N/A"; // Default value if details not found
                

                let carparkDistDetails_HDB = await getDistanceInformation(latitude, longitude, userLatLng.lat, userLatLng.lng);
                carparkDistDetails_HDB = parseFloat(carparkDistDetails_HDB);

                coords[4] = carparkDistDetails_HDB;
                const isCentral = central.some(c => c.code === carparkNumber);
                coords[5] = isCentral ? "$1.20 per half-hour" : "$0.60 per half-hour";
                coords[6] = carparkLotsDetails_HDB; // Store available lots in coords[6]

                nearbyCarparksHDB[i] = coords.join(',');

                carparkMarker.bindPopup(
                    carparkMarker.getPopup().getContent() +
                    `<br><strong>Details:</strong> ${JSON.stringify(carparkLotsDetails_HDB)}` +
                    `<br><strong>Distance:</strong> ${carparkDistDetails_HDB} meters` +
                    `<br><strong>Pricing:</strong> ${coords[5]}` +
                    `<br><strong>Available Lots:</strong> ${availableLots}`
                );

                currentCarparks.push(carparkMarker);
            }
        }
        console.log("HDB Carpark Coordinates with Distance, Pricing, and Availability:", nearbyCarparksHDB);
    } else {
        console.log('No nearby HDB carparks found.');
    }
}



/*
async function displayNearbyCarparks_URA(lat, lon) {
    // Remove the previous circle
    if (circle) {
        map.removeLayer(circle);
        circle = null;
    }

    // Remove the previous carpark markers
    currentCarparks.forEach(marker => {
        map.removeLayer(marker);
    });
    currentCarparks = []; // Reset the array

    // Create a new circle at the destination
    circle = L.circle([lat, lon], 500).addTo(map); // Circle radius is set to 500 meters

    console.log('Fetching URA carpark coordinates...');
    // Fetch all URA carpark coordinates
    const coordinatesURA = await getAllCarparkCoor_URA();
    console.log('Fetched URA coordinates:', coordinatesURA);

    // Check if any coordinates were fetched
    if (coordinatesURA.length === 0) {
        console.log('No URA carpark coordinates found. Exiting function.');
        return; // Exit if no coordinates are found
    }

    // Fetch nearby carparks from URA
    const nearbyCarparksURA = await findNearbyCarparks_URA(lat ,lon);

    if (nearbyCarparksURA.length > 0) {
        for (const lot of nearbyCarparksURA) {
            const coords = lot.split(',').map(coord => coord.trim());
            const carparkNumber = coords[0];
            //console.log('ppcode:', carparkNumber);
            const latitude = parseFloat(coords[1]);
            const longitude = parseFloat(coords[2]);

            if (!isNaN(latitude) && !isNaN(longitude)) {
                const carparkMarker = L.marker([latitude, longitude]).addTo(map)
                    .bindPopup(`<strong>Car Park</strong><br>Coordinates: ${latitude}, ${longitude}`);

                // Fetch car park lots details asynchronously for URA
                const carparkLotsDetails_URA = await getCarparkLotsDetails_URA(carparkNumber);
                const carparkPriceDetails_URA = await getCarparkPriceDetails_URA(carparkNumber);
                const carparkDistDetails_URA= await getDistanceInformation(latitude, longitude , lat, lon);

                // Optionally update the popup with car park details if available
                if (carparkLotsDetails_URA) {
                    carparkMarker.bindPopup(carparkMarker.getPopup().getContent() + 
                        `<br><strong>Details:</strong><br>${JSON.stringify(carparkLotsDetails_URA)}`);
                }

                if (carparkPriceDetails_URA) {
                    carparkMarker.bindPopup(carparkMarker.getPopup().getContent() + 
                        `<br><strong>Details:</strong><br>${JSON.stringify(carparkPriceDetails_URA)}`);
                }

                if (carparkDistDetails_URA) {
                    carparkMarker.bindPopup(carparkMarker.getPopup().getContent() + 
                        `<br><strong>Details:</strong><br>${JSON.stringify(carparkDistDetails_URA)}`);
                }

                // Store each carpark marker in the array
                currentCarparks.push(carparkMarker);
            }
        }
    } else {
        console.log('No nearby URA carparks found.');
    }
}
*/

// Update the searchLocation function to use displayNearbyCarParks
    function searchLocation() {
    const searchQuery = document.getElementById('search').value;

    if (searchQuery.trim() !== "") {
        const url = `https://www.onemap.gov.sg/api/common/elastic/search?searchVal=${searchQuery}&returnGeom=Y&getAddrDetails=Y&pageNum=1`;

        $.get(url, function (data) {
            console.log("Data received from OneMap API:", data);

            if (data.results && data.results.length > 0) {
                const firstResult = data.results[0];
                const lat = parseFloat(firstResult.LATITUDE);
                const lng = parseFloat(firstResult.LONGITUDE);
                const searchLatLng = L.latLng(lat, lng);

                console.log("Location found:", lat, lng);

                // Remove old search marker if it exists
                if (searchMarker) {
                    map.removeLayer(searchMarker);
                }

                if (circle) {
                    map.removeLayer(circle);
                    circle = null;
                }

                // Add marker for the searched location
                searchMarker = L.marker([lat, lng]).addTo(map)
                    .bindPopup(`Search Result: ${firstResult.SEARCHVAL}`)
                    .openPopup();

                // Center the map to the search result location
                map.setView([lat, lng], 16);

                
                //displayNearbyCarparks_URA(lat, lng);

                // Call routing function if user's location is available
                if (userLatLng) {
                    // Display both URA and HDB car parks near the search location
                    displayNearbyCarparks_HDB(lat, lng);
                    getRoute(userLatLng, searchLatLng);
                } else {
                    console.error("User location is not available.");
                }

            } else {
                alert("No results found.");
                console.warn("No results returned from OneMap API.");
            }
        }).fail(function (error) {
            alert("Error fetching data from OneMap API.");
            console.error("Error fetching data from OneMap API:", error);
        });
    } else {
        alert("Please enter a location to search for.");
    }
}
<<<<<<< HEAD






=======
>>>>>>> 51ff68d (Update)
        // Display parking history
    function displayParkingHistory() {
        const history = [
            { id: 5, title: 'Car Park 5', price: 0.55, distance: 400, availability: 23 }
        ];

<<<<<<< HEAD
            history.forEach(lot => {
                const historyDiv = document.createElement('div');
                historyDiv.classList.add('parking-history');
                historyDiv.innerHTML = `
                    <h3>${lot.title}</h3>
                    <p>Price: $${lot.price} / hour</p>
                    <p>Distance: ${lot.distance}m</p>
                    <p>Availability: ${lot.availability}/50 spots</p>
                    <button>Select</button>
                `;
                document.getElementById('parking-history').appendChild(historyDiv);
            });
        }

        function showUserLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function (position) {
                    userLatLng = L.latLng(position.coords.latitude, position.coords.longitude);

                    // Add marker for user's location
                    L.marker(userLatLng).addTo(map)
                        .bindPopup('<p id="locationText" class="currloc">Your location</p>')
                        .openPopup();

                    // Center map on user's location
                    map.setView(userLatLng, 16);
                    console.log("User location retrieved:", position.coords.latitude, position.coords.longitude);
                }, 
                function (error) {
                    console.error("Error getting location:", error.message);
                    alert("Error retrieving your location. Please enable location permissions or check your browser's security settings.");
                }
            );
        } else {
            alert("Geolocation is not supported by this browser.");
        }
        }


        // Declare a variable to store the current route
        let currentRoute;
        let circle = null;            // To store the circle around the destination
        let currentCarparks = [];     // To store the current carpark markers

    async function getRoute(startLatLng, endLatLng) {
        if (!startLatLng || !endLatLng) {
            console.error("Start or end location is missing.");
            return;
        }

        // Get current date and time for the route request
        const currentDate = new Date();
        const formattedDate = `${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}-${currentDate.getFullYear()}`;
        const formattedTime = `${String(currentDate.getHours()).padStart(2, '0')}${String(currentDate.getMinutes()).padStart(2, '0')}00`;

        // Construct the API URL according to the documentation
        const routeUrl = `https://www.onemap.gov.sg/api/public/routingsvc/route?start=${startLatLng.lat},${startLatLng.lng}&end=${endLatLng.lat},${endLatLng.lng}&routeType=drive`;

        $.ajax({
            url: routeUrl,
            type: 'GET',
            headers: {
                'Authorization': apiToken // fetch oneMapToken
            },
            success: async function (data) { // Make the success callback async
                if (data && data.route_geometry) {
                    // Decode the route geometry to get the polyline coordinates
                    const routeCoordinates = decodePolyline(data.route_geometry);

                   
                    // If there is an existing route, remove it
                    if (currentRoute) {
                        map.removeLayer(currentRoute);
                    }

                    // Remove the previous circle
                    if (circle) {
                        map.removeLayer(circle);
                        circle = null;
                    }

                    // Remove the previous carpark markers
                    currentCarparks.forEach(marker => {
                        map.removeLayer(marker);
                    });
                    currentCarparks = []; // Reset the array
                    
                    // Draw the new route on the map
                    currentRoute = L.polyline(routeCoordinates, { color: 'blue' }).addTo(map);
                    circle = L.circle([endLatLng.lat, endLatLng.lng], 500).addTo(map);
                    /*
                    //fetch all coordinates 
                    const carparkCoordinates = await getAllCarparkCoor_HDB();
                    // Fetch nearby carparks and add markers
                    const nearbyCarparks = await findNearbyCarparks_HDB(endLatLng.lat, endLatLng.lng);

                    if (nearbyCarparks.length > 0) {
                        for (const lot of nearbyCarparks) { // Use for...of to await each iteration
                            // Assuming lot is a string like "carpark_num, 1.434901737416896, 103.78661383499883"
                            const coords = lot.split(',').map(coord => coord.trim());
                            const carparkNumber = coords[0]; // Use directly as a string
                            const latitude = parseFloat(coords[1]);
                            const longitude = parseFloat(coords[2]);

                            if (!isNaN(coords[1]) && !isNaN(coords[2])) {  // Ensure valid coordinates
                                const carparkMarker = L.marker([coords[1], coords[2]]).addTo(map)
                                    .bindPopup(`<strong>Car Park</strong><br>Coordinates: ${coords[1]}, ${coords[2]}`);
                                
                                // Fetch car park details asynchronously
                                const carparkLotsDetails = await getCarparkLotsDetails(carparkNumber);

                                const carparkDistDetails = await getDistanceInformation(latitude, longitude , startLatLng.lat, startLatLng.lng);

                                // Optionally update the popup with car park details if available
                                if (carparkLotsDetails) {
                                    carparkMarker.bindPopup(carparkMarker.getPopup().getContent() + 
                                        `<br><strong>Details:</strong><br>${JSON.stringify(carparkDetails)}`);
                                }

                                // Store each carpark marker in the array
                                currentCarparks.push(carparkMarker);
                                
                            } else {
                                console.error("Invalid lat/lng for:", lot);
                            }
                        }
                    } else {
                        console.log("No nearby car parks found.");
                    }*/
                } else {
                    alert("No route found between the specified locations.");
                }
            },
            error: function () {
                alert("Error fetching route from OneMap API.");
            }
        });
    }
=======
        history.forEach(lot => {
            const historyDiv = document.createElement('div');
            historyDiv.classList.add('parking-history');
            historyDiv.innerHTML = `
                <h3>${lot.title}</h3>
                <p>Price: $${lot.price} / hour</p>
                <p>Distance: ${lot.distance}m</p>
                <p>Availability: ${lot.availability}/50 spots</p>
                <button>Select</button>
            `;
            document.getElementById('parking-history').appendChild(historyDiv);
        });
    }

    function showUserLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function (position) {
                userLatLng = L.latLng(position.coords.latitude, position.coords.longitude);

                // Add marker for user's location
                L.marker(userLatLng).addTo(map)
                    .bindPopup('<p id="locationText" class="currloc">Your location</p>')
                    .openPopup();

                // Center map on user's location
                map.setView(userLatLng, 16);
                console.log("User location retrieved:", position.coords.latitude, position.coords.longitude);
            }, 
            function (error) {
                console.error("Error getting location:", error.message);
                alert("Error retrieving your location. Please enable location permissions or check your browser's security settings.");
            }
        );
    } else {
        alert("Geolocation is not supported by this browser.");
    }
    }

    // Declare a variable to store the current route
    let currentRoute;
    let circle = null;            // To store the circle around the destination
    let currentCarparks = [];     // To store the current carpark markers

    async function getRoute(startLatLng, endLatLng) {
if (!startLatLng || !endLatLng) {
    console.error("Start or end location is missing.");
    return;
}
>>>>>>> 51ff68d (Update)

// Get current date and time for the route request
const currentDate = new Date();
const formattedDate = `${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}-${currentDate.getFullYear()}`;
const formattedTime = `${String(currentDate.getHours()).padStart(2, '0')}${String(currentDate.getMinutes()).padStart(2, '0')}00`;

// Construct the API URL according to the documentation
const routeUrl = `https://www.onemap.gov.sg/api/public/routingsvc/route?start=${startLatLng.lat},${startLatLng.lng}&end=${endLatLng.lat},${endLatLng.lng}&routeType=drive`;

$.ajax({
    url: routeUrl,
    type: 'GET',    
    headers: {
        'Authorization': apiToken // fetch oneMapToken
    },
    success: async function (data) { // Make the success callback async
        if (data && data.route_geometry) {
            // Decode the route geometry to get the polyline coordinates
            const routeCoordinates = decodePolyline(data.route_geometry);

            // If there is an existing route, remove it
            if (currentRoute) {
                map.removeLayer(currentRoute);
            }

            // Remove the previous circle
            if (circle) {
                map.removeLayer(circle);
                circle = null;
            }

            // Remove the previous carpark markers
            currentCarparks.forEach(marker => {
                map.removeLayer(marker);
            });
            currentCarparks = []; // Reset the array

            // Draw the new route on the map
            currentRoute = L.polyline(routeCoordinates, { color: 'blue' }).addTo(map);
            circle = L.circle([endLatLng.lat, endLatLng.lng], 500).addTo(map);

            //fetch all coordinates 
            const carparkCoordinates = await getAllCarparkCoor_HDB();
            // Fetch nearby carparks and add markers
            const nearbyCarparks = await findNearbyCarparks_HDB(endLatLng.lat, endLatLng.lng);

            if (nearbyCarparks.length > 0) {
                for (const lot of nearbyCarparks) { // Use for...of to await each iteration
                    // Assuming lot is a string like "carpark_num, 1.434901737416896, 103.78661383499883"
                    const coords = lot.split(',').map(coord => coord.trim());
                    const carparkNumber = coords[0]; // Use directly as a string
                    const latitude = parseFloat(coords[1]);
                    const longitude = parseFloat(coords[2]);

                    if (!isNaN(coords[1]) && !isNaN(coords[2])) {  // Ensure valid coordinates

                        //Icon for carpark
                        var carparkicon= L.icon({
                            iconUrl: "/css/images/parkingicon.png",
                            iconSize: [30, 30],
                        })
                        
                        //Place markers on map
                        const carparkMarker = L.marker([coords[1], coords[2]], {icon:carparkicon}).addTo(map)
                            .bindPopup(`<strong>Car Park</strong><br>Coordinates: ${coords[1]}, ${coords[2]}`).on('click', clickTest);
                        
                        // Fetch car park details asynchronously
                        const carparkLotsDetails = await getCarparkLotsDetails(carparkNumber);

                        const carparkDistDetails = await getDistanceInformation(latitude, longitude , startLatLng.lat, startLatLng.lng);

                        // Optionally update the popup with car park details if available
                        if (carparkLotsDetails) {
                            carparkMarker.bindPopup(carparkMarker.getPopup().getContent() + 
                                `<br><strong>Details:</strong><br>${JSON.stringify(carparkDetails)}`);
                        }

                        // Store each carpark marker in the array
                        currentCarparks.push(carparkMarker);

                        function clickTest(e){
                            console.log("clicked"); 
                        }

                        

                    } else {
                        console.error("Invalid lat/lng for:", lot);
                    }
                }
            } else {
                console.log("No nearby car parks found.");
            }
        } else {
            alert("No route found between the specified locations.");
        }
    },
    error: function () {
        alert("Error fetching route from OneMap API.");
    }
});
}

    // Attach event listener to the search button or input field
    document.getElementById('search').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                searchLocation();
            }
        });
    </script>
    <script type='text/javascript' src="/js/Index_Functions.js"></script>
</body>
</html>
